
import org.micromanager.api.MultiStagePosition;
import org.micromanager.api.PositionList;
import org.micromanager.api.StagePosition;
import org.micromanager.api.AcquisitionOptions;
import java.lang.System;
import java.lang.Math;
import ij.gui.GenericDialog;

PositionList pl = new PositionList();
xyStage = mmc.getXYStageDevice();
zStage = mmc.getFocusDevice();
gui.enableLiveMode(true);

//Setting up zoom window
zoomLevel = 0.7;
win = IJ.getImage().getWindow();
newWidth = (int) (zoomLevel * win.getImagePlus().getWidth());
newHeight = (int) (zoomLevel * win.getImagePlus().getHeight());
newSize = new Dimension(newWidth, newHeight);
win.getCanvas().setDrawingSize(newWidth, newHeight);
win.getCanvas().setMagnification(zoomLevel);
win.pack();
win.toFront();

// Aligning first point
GenericDialog dlg = new GenericDialog("Identify Corners", null);
dlg.addMessage("Find 1st Corner");
dlg.showDialog();
if (dlg.wasCanceled())
return false;     
X1 = mmc.getXPosition(xyStage);
Y1 = mmc.getYPosition(xyStage);
Z1 = mmc.getPosition(zStage);
print("X1 = " + X1);
print("Y1 = " + Y1);
print("Z1 = " + Z1);
MultiStagePosition msp = new MultiStagePosition(xyStage, X1, Y1, zStage, Z1);
msp.setLabel("1st Corner");
pl.addPosition(msp);
gui.setPositionList(pl);

// Aligning second point
mmc.setXYPosition("XYStage:XY:31", X1 + (Streets[ChipIndex]-1)*Street_Spacing[ChipIndex], Y1);
GenericDialog dlg = new GenericDialog("Manual Acquisition", null);
dlg.addMessage("Find 2nd Corner");
dlg.showDialog();
if (dlg.wasCanceled())
return false;       
X2 = mmc.getXPosition(xyStage);
Y2 = mmc.getYPosition(xyStage);
Z2 = mmc.getPosition(zStage);
print("X2 = " + X2);
print("Y2 = " + Y2);
print("Z2 = " + Z2);
MultiStagePosition msp = new MultiStagePosition(xyStage, X2, Y2, zStage, Z2);
msp.setLabel("2nd Corner");
pl.addPosition(msp);
gui.setPositionList(pl);

// Aligning third point
mmc.setXYPosition("XYStage:XY:31", X2, Y2 - (Apts[ChipIndex]-2)*Apt_Spacing[ChipIndex]);
GenericDialog dlg = new GenericDialog("Manual Acquisition", null);
dlg.addMessage("Find 3rd Corner");
dlg.showDialog();
if (dlg.wasCanceled())
return false;        
X3 = mmc.getXPosition(xyStage);
Y3 = mmc.getYPosition(xyStage);
Z3 = mmc.getPosition(zStage);
print("X3 = " + X3);
print("Y3 = " + Y3);
print("Z3 = " + Z3);
MultiStagePosition msp = new MultiStagePosition(xyStage, X3, Y3, zStage, Z3);
msp.setLabel("3rd Corner");
pl.addPosition(msp);
gui.setPositionList(pl);

//Calculating X and Y Periods
dis12=Math.sqrt(Math.pow((X2-X1),2)+Math.pow((Y2-Y1),2)+Math.pow((Z2-Z1),2));
dis23=Math.sqrt(Math.pow((X3-X2),2)+Math.pow((Y3-Y2),2)+Math.pow((Z3-Z2),2));
PeriodX=dis12/(Streets[ChipIndex]-1);
PeriodY=dis23/(Apts[ChipIndex]-2);
print("Array Period X =" + PeriodX);
print("Array Period Y =" + PeriodY);
Nx = (Y2-Y1)*(Z3-Z1)-(Y3-Y1)*(Z2-Z1);
Ny = (Z2-Z1)*(X3-X1)-(Z3-Z1)*(X2-X1);
Nz = (X2-X1)*(Y3-Y1)-(X3-X1)*(Y2-Y1);
cosX = (X2-X1)/dis12;
sinX = (Y2-Y1)/dis12;

mmc.setXYPosition("XYStage:XY:31", X1, Y1);

// Re-focusing at interior points
PerX=Streets[ChipIndex]/4;
PerY=16;
double[] XPos = new double[20];
double[] YPos = new double[20];
double[] ZPos = new double[20];

for (int counterJ=0; counterJ<4; counterJ++) {
	for (int counterI=0; counterI<5; counterI++) {
		if (counterJ == 0){
			Pos = counterI;
		}
		else if (counterJ == 1){
			Pos = counterI+5;
		}
		else if (counterJ == 2){
			Pos = counterI+10;
		}
		else if (counterJ == 3){
			Pos = counterI+15;
		}
		else if (counterJ == 4){
			Pos = counterI+20;
		}
		Xnew = X1 + (counterI*PerX-1)*PeriodX*cosX + (counterJ*PerY-1)*PeriodY*sinX;
		Ynew = Y1 - (counterJ*PerY-1)*PeriodY*cosX + (counterI*PerX-1)*PeriodX*sinX;
		XPos[Pos]=Xnew;
		YPos[Pos]=Ynew;	
		mmc.setXYPosition("XYStage:XY:31", Xnew, Ynew);
		MultiStagePosition msp = new MultiStagePosition();
		StagePosition s = new StagePosition();
		s.stageName = xyStage;
		s.numAxes = 2;
		s.x = Xnew;
		s.y = Ynew;
		msp.add(s);
		
		GenericDialog dlg = new GenericDialog("Improve Focus", null);
		dlg.addMessage("Find best focus");
		dlg.showDialog();
		if (dlg.wasCanceled())
		return false;
		
		StagePosition s2 = new StagePosition();
		s2.stageName = zStage;
		s2.x = mmc.getPosition(zStage);
		msp.add(s2);
		ZPos[Pos]=mmc.getPosition(zStage);	
		
		String StF = Integer.toString(counterI*PerX+10000);
		String AptF = Integer.toString(counterJ*PerY+10000);
		String StFi = StF.substring(2,5);
		String AptFi = AptF.substring(2,5);
		msp.setLabel("Better Focus ST_" + StFi + "_APT_" + AptFi);
		pl.addPosition(msp);
	}
}

MultiStagePosition.goToPosition(pl.getPosition(0), mmc);	

double[] NXPos = new double[20];
double[] NYPos = new double[20];
double[] NZPos = new double[20];

for (int counterK=0; counterK<4; counterK++) {
	index=counterK;
	NXPos[index] = (YPos[index+1]-YPos[index])*(ZPos[index+6]-ZPos[index])-(YPos[index+6]-YPos[index])*(ZPos[index+1]-ZPos[index]);
	NYPos[index] = (ZPos[index+1]-ZPos[index])*(XPos[index+6]-XPos[index])-(ZPos[index+6]-ZPos[index])*(XPos[index+1]-XPos[index]);
	NZPos[index] = (XPos[index+1]-XPos[index])*(YPos[index+6]-YPos[index])-(XPos[index+6]-XPos[index])*(YPos[index+1]-YPos[index]);
}

for (int counterK=0; counterK<4; counterK++) {
	index=counterK+5;
	NXPos[index] = (YPos[index+1]-YPos[index])*(ZPos[index+6]-ZPos[index])-(YPos[index+6]-YPos[index])*(ZPos[index+1]-ZPos[index]);
	NYPos[index] = (ZPos[index+1]-ZPos[index])*(XPos[index+6]-XPos[index])-(ZPos[index+6]-ZPos[index])*(XPos[index+1]-XPos[index]);
	NZPos[index] = (XPos[index+1]-XPos[index])*(YPos[index+6]-YPos[index])-(XPos[index+6]-XPos[index])*(YPos[index+1]-YPos[index]);
}

for (int counterK=0; counterK<4; counterK++) {
	index=counterK+10;
	NXPos[index] = (YPos[index+1]-YPos[index])*(ZPos[index+6]-ZPos[index])-(YPos[index+6]-YPos[index])*(ZPos[index+1]-ZPos[index]);
	NYPos[index] = (ZPos[index+1]-ZPos[index])*(XPos[index+6]-XPos[index])-(ZPos[index+6]-ZPos[index])*(XPos[index+1]-XPos[index]);
	NZPos[index] = (XPos[index+1]-XPos[index])*(YPos[index+6]-YPos[index])-(XPos[index+6]-XPos[index])*(YPos[index+1]-YPos[index]);
}

mmc.setXYPosition("XYStage:XY:31", XPos[0], YPos[0]);
mmc.setPosition("ZStage:Z:32", ZPos[0]);
PositionList pl = new PositionList();

for (int l=0; l<3; l++) {
	for (int k=0; k<4; k++) {
		for (int i=0; i < 32; i++) {
			for (int j=0; j < 16; j++) {
				double Apt_d = j;
				if (l == 0){
					POS = k;
				}
				else if (l == 1){
					POS = k+5;
				}
				else if (l == 2){
					POS = k+10;
				}	
				if (Apt_d/2 - Math.floor(Apt_d/2) < 0.01){	
					MultiStagePosition msp = new MultiStagePosition();
					StagePosition s = new StagePosition();
					s.stageName = xyStage;
					s.numAxes = 2;
					s.x = XPos[POS] + (i+1) * PeriodX*cosX + (j+1) * PeriodY*sinX;
					s.y = YPos[POS] - (j+1) * PeriodY*cosX + (i+1) * PeriodX*sinX;	
					msp.add(s);
					StagePosition s2 = new StagePosition();
					s2.stageName = zStage;
					s2.x = ZPos[POS] - (NXPos[POS]*(i*PeriodX*cosX + j*PeriodY*sinX) + NYPos[POS]*(-j*PeriodY*cosX - i*PeriodX*sinX))/NZPos[POS];
					msp.add(s2);
					String Apt_c = Integer.toString(j+16*l+10000);
					String Apt_ci = Apt_c.substring(2,5);
					String St_c = Integer.toString(i+32*k+10000);
					String St_ci = St_c.substring(2,5);     	
					msp.setLabel("ST_" + St_ci + "_APT_" + Apt_ci);
					pl.addPosition(msp);
				} else if (Apt_d/2 - Math.floor(Apt_d/2) > 0.01) {
					MultiStagePosition msp = new MultiStagePosition();
					StagePosition s = new StagePosition();
					s.stageName = xyStage;
					s.numAxes = 2;
					s.x = XPos[POS] + (i+1) * PeriodX*cosX + (j+1) * PeriodY*sinX + PeriodX*cosX/2;
					s.y = YPos[POS] - (j+1) * PeriodY*cosX + (i+1) * PeriodX*sinX - PeriodX*sinX/2;	
					msp.add(s);
					StagePosition s2 = new StagePosition();
					s2.stageName = zStage;
					s2.x = ZPos[POS] - (NXPos[POS]*(i*PeriodX*cosX + j*PeriodY*sinX-PeriodX*cosX/2) + NYPos[POS]*(-j*PeriodY*cosX - i*PeriodX*sinX + PeriodX*sinX/2))/NZPos[POS];
					msp.add(s2);
					String Apt_c = Integer.toString(j+16*l+10000);
					String Apt_ci = Apt_c.substring(2,5);
					String St_c = Integer.toString(i+32*k+10000);
					String St_ci = St_c.substring(2,5);     
					msp.setLabel("ST_" + St_ci + "_APT_" + Apt_ci);
					pl.addPosition(msp);
				}
			}
		}
	}
}

gui.setPositionList(pl);

mmc.setXYPosition("XYStage:XY:31", XPos[0], YPos[0]);